{"version":3,"sources":["components/app-wrapper/AppWrapper.js","components/title/Title.js","components/input/Input.js","components/point/Point.js","components/points-list/PointsList.js","components/yandex-map/Map.js","container/main/Main.js","App.js","serviceWorker.js","index.js"],"names":["AppWrapper","_ref","children","react_default","a","createElement","className","defaultProps","Title","text","Input","value","handleInputChange","onEnterPress","tooltip","Fragment","type","onChange","onKeyPress","placeholder","autoFocus","React","memo","Point","id","deletePoint","onClick","e","PointsList","points","map","point","name","geoObject","properties","get","components_point_Point","key","Map","ymaps","window","Main","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initMap","yaMap","center","zoom","updateMap","setCenter","toCenter","paintPolyline","addPoint","asyncToGenerator","regenerator_default","mark","_callee","_this$state","inputText","searchResult","geocoder","newPoint","wrap","_context","prev","next","state","geocode","results","boundedBy","getBounds","sent","geoObjects","t0","alert","createPointObj","add","addDragEventsOnMapPoint","geometry","getCoordinates","setState","concat","toConsumableArray","stop","events","onMapPointDragStart","onMapPointDragEnd","changePoint","bind","assertThisInitialized","_ref2","_callee2","coordsForSearch","newSearchResult","baloonContent","coords","newPoints","targetPointIndex","_context2","set","setCoordinates","findIndex","_x","apply","arguments","targetPoint","find","filter","length","targetGeoObj","remove","onPointListDrop","elem","_","__","siblingElem","newElemIndex","elemId","getAttribute","indexOf","siblingElemId","splice","newPointsFiltered","el","deleteOldPolyline","geoObj","Date","getTime","GeoObject","coordinates","hintContent","balloonContent","draggable","polylineCoords","polyline","Polyline","strokeColor","strokeWidth","strokeOpacity","route","_ref3","target","_ref4","dragAndDrop","ready","err","initDNDonPointsList","dragContainer","document","querySelector","dragula","on","_this$state2","components_input_Input","points_list_PointsList","components_yandex_map_Map","Component","App","components_app_wrapper_AppWrapper","components_title_Title","container_main_Main","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f8c443d.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './AppWrapper.css';\r\n\r\n\r\nconst AppWrapper = ({children}) => (\r\n    <div className=\"wrapper\">{children}</div>\r\n);\r\n\r\n\r\nAppWrapper.propTypes = {\r\n    children: PropTypes.node\r\n};\r\n\r\nAppWrapper.defaultProps = {\r\n    children: null\r\n};\r\n\r\nexport default AppWrapper;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Title.css';\r\n\r\n\r\nconst Title = ({text}) => (\r\n    <header>\r\n        <h1 className=\"title\">{text}</h1>\r\n    </header>\r\n);\r\n\r\n\r\nTitle.propTypes = {\r\n    text: PropTypes.string\r\n};\r\n\r\nTitle.defaultProps = {\r\n    text: 'Simple text'\r\n};\r\n\r\nexport default Title;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Input.css';\r\n\r\n\r\nconst Input = ({value, handleInputChange, onEnterPress, tooltip}) => (\r\n    <>\r\n    {tooltip && <div className=\"tooltip\">not found</div>}\r\n    <input type=\"text\"\r\n           className=\"input\"\r\n           value={value}\r\n           onChange={handleInputChange}\r\n           onKeyPress={onEnterPress}\r\n           placeholder=\"Search...\"\r\n           autoFocus\r\n    />\r\n    </>\r\n);\r\n\r\n\r\nInput.propTypes = {\r\n    value: PropTypes.string,\r\n    handleInputChange: PropTypes.func,\r\n    onEnterPress: PropTypes.func,\r\n    tooltip: PropTypes.bool\r\n};\r\n\r\nInput.defaultProps = {\r\n    value: '',\r\n    handleInputChange: () => {},\r\n    onEnterPress: () => {},\r\n    tooltip: false\r\n};\r\n\r\nexport default React.memo(Input);\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Point.css';\r\n\r\n\r\nconst Point = ({value, id, deletePoint}) => (\r\n    <div className=\"point\" id ={id}>\r\n        <span className=\"pointName\">\r\n            {value}\r\n        </span>\r\n        <i className=\"fas fa-times\"\r\n           onClick={(e) => deletePoint(id, e)}/>\r\n    </div>\r\n);\r\n\r\n\r\nPoint.propTypes = {\r\n    value: PropTypes.string,\r\n    id: PropTypes.number,\r\n    deletePoint: PropTypes.func,\r\n};\r\n\r\nPoint.defaultProps = {\r\n    value: '',\r\n    id: 0,\r\n    deletePoint: () => {},\r\n};\r\n\r\nexport default Point;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Point from '../point/Point';\r\n\r\n\r\nconst PointsList = ({points, deletePoint}) => (\r\n    <div className=\"pointList\">\r\n        {points.map((point) => {\r\n            const name = point.geoObject.properties.get('name');\r\n            return(<Point key={point.id}\r\n                   value={name}\r\n                   id={point.id}\r\n                   deletePoint={deletePoint}\r\n            />)\r\n        })}\r\n    </div>\r\n);\r\n\r\n\r\nPointsList.propTypes = {\r\n    points: PropTypes.array,\r\n    deletePoint: PropTypes.func,\r\n};\r\n\r\nPointsList.defaultProps = {\r\n    points: [],\r\n    deletePoint: () => {},\r\n};\r\n\r\nexport default React.memo(PointsList);","import React from 'react';\r\n\r\nimport './Map.css';\r\n\r\n\r\nconst Map = () => (\r\n    <div className=\"map\" id=\"map\"/>\r\n);\r\n\r\nexport default Map;\r\n\r\n\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport dragula from 'react-dragula';\r\n\r\nimport Input from '../../components/input/Input';\r\nimport PointsList from '../../components/points-list/PointsList';\r\nimport Map from '../../components/yandex-map/Map';\r\nimport './Main.css';\r\n\r\nconst ymaps = window.ymaps;\r\n\r\nclass Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inputText: '',\r\n            points: [],\r\n            tooltip: false\r\n        };\r\n\r\n        this.toCenter = [];\r\n        this.route = null;\r\n        this.yaMap = null; //instance of YandexMaps\r\n        this.dragAndDrop = null; //instance of dragula\r\n\r\n        this.onMapPointDragEnd = null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        try {\r\n            ymaps.ready(this.initMap);\r\n        } catch (err) {\r\n            alert(err);\r\n        }\r\n        this.initDNDonPointsList();\r\n    };\r\n\r\n\r\n    initMap = () => {\r\n        this.yaMap = new ymaps.Map('map', {\r\n            center: [55.75, 37.57],\r\n            zoom: 12\r\n        });\r\n    };\r\n\r\n    updateMap = () => {\r\n        this.yaMap.setCenter(this.toCenter);//set map center from saved coords\r\n        this.paintPolyline();\r\n    };\r\n\r\n\r\n    addPoint = async () => {\r\n        //search for geo objects by entered value\r\n        const {inputText, points} = this.state;\r\n        let searchResult;\r\n        try {\r\n            const geocoder = await ymaps.geocode(inputText, {\r\n                results: 1,\r\n                boundedBy: this.yaMap.getBounds()\r\n            });\r\n            searchResult = await geocoder.geoObjects.get(0);\r\n        } catch (err) {\r\n            alert(err);\r\n        }\r\n\r\n        if (searchResult) {\r\n            const newPoint = this.createPointObj(searchResult);//create new Point object with necessary data\r\n            const {geoObject} = newPoint;\r\n            this.yaMap.geoObjects.add(geoObject);// add new point on map\r\n            this.addDragEventsOnMapPoint(newPoint);//add event handlers for dragging points on the map\r\n            this.toCenter = geoObject.geometry.getCoordinates();//save coords of our new point\r\n            this.setState({\r\n                inputText: '',\r\n                points: [...points, newPoint],\r\n                tooltip: false\r\n            }, this.updateMap);\r\n        } else {\r\n            this.setState({\r\n                inputText: '',\r\n                tooltip: true\r\n            });\r\n        }\r\n    };\r\n\r\n    addDragEventsOnMapPoint = (point) => {\r\n        const {geoObject} = point;\r\n        geoObject.events.add('dragstart', this.onMapPointDragStart);\r\n\r\n        this.onMapPointDragEnd = this.changePoint.bind(this, point);\r\n        geoObject.events.add('dragend', this.onMapPointDragEnd);\r\n    };\r\n\r\n    changePoint = async (point) => {\r\n        const {geoObject, id} = point;\r\n        //search for geo objects by new coordinates\r\n        const coordsForSearch = geoObject.geometry.getCoordinates();\r\n        let newSearchResult;\r\n        try {\r\n            const geocoder = await ymaps.geocode(coordsForSearch);\r\n            newSearchResult = await geocoder.geoObjects.get(0);\r\n        } catch (err) {\r\n            alert(err);\r\n        }\r\n\r\n        if (newSearchResult) {\r\n            const name = newSearchResult.properties.get('name');\r\n            const baloonContent = newSearchResult.properties.get('balloonContent');\r\n            const coords = newSearchResult.geometry.getCoordinates();\r\n\r\n            //change our dragged geoobject\r\n            geoObject.properties.set('balloonContent', baloonContent);\r\n            geoObject.properties.set('name', name);\r\n            geoObject.geometry.setCoordinates(coords);//move our point to coordinates of found geoobject\r\n\r\n            const newPoint = {\r\n                geoObject,\r\n                id\r\n            };\r\n\r\n            const {points} = this.state;\r\n            const newPoints = [...points];\r\n            const targetPointIndex = newPoints.findIndex(point => (point.id === id));//remove dragged point from list\r\n            newPoints[targetPointIndex] = newPoint;//add dragged point to a new position in list\r\n\r\n            this.setState({\r\n                points: newPoints,\r\n            }, this.paintPolyline);\r\n        }\r\n    };\r\n\r\n    deletePoint = (id) => {\r\n        const {points} = this.state;\r\n        const targetPoint = points.find(point => (point.id === id)); //search target point object in list\r\n\r\n        const newPoints = points.filter(point => (point.id !== id));//delete target point from list\r\n\r\n        if (newPoints.length) {\r\n            //if list isn't empty use last point coordinates\r\n            const targetGeoObj = newPoints[newPoints.length - 1].geoObject;\r\n            this.toCenter = targetGeoObj.geometry.getCoordinates();\r\n            //and if list is empty, use the old value\r\n        }\r\n\r\n        //remove event listeners from geoobject\r\n        const {geoObject} = targetPoint;\r\n        geoObject.events.remove('dragstart', this.onMapPointDragStart);\r\n        geoObject.events.remove('dragend', this.onMapPointDragEnd);\r\n\r\n        this.yaMap.geoObjects.remove(geoObject);//remove target point from map\r\n\r\n        this.setState({\r\n            points: newPoints,\r\n        }, this.updateMap);\r\n    };\r\n\r\n    initDNDonPointsList() {\r\n        const dragContainer = document.querySelector('.pointList');\r\n        this.dragAndDrop = dragula([dragContainer]);\r\n        this.dragAndDrop.on('drop', this.onPointListDrop);\r\n    }\r\n\r\n    onPointListDrop = (elem, _, __, siblingElem) => {\r\n        const elemId = +elem.getAttribute('id'); //get dropped dom-elem's id\r\n        const {points} = this.state;\r\n\r\n        const targetPoint = points.find(point => (point.id === elemId)); //search target point object in list\r\n        const targetPointIndex = points.indexOf(targetPoint);\r\n\r\n        let newElemIndex;\r\n        if (siblingElem) {\r\n            const siblingElemId = +siblingElem.getAttribute('id'); //get id of dom-elem that comes after dropped elem\r\n            newElemIndex = points.findIndex(point => (point.id === siblingElemId));\r\n        } else {\r\n            newElemIndex = points.length; //if no dom-elem after dropped dom-elem\r\n        }\r\n\r\n        const newPoints = [...points];\r\n        delete newPoints[targetPointIndex];// delete target point from old index\r\n        newPoints.splice(newElemIndex, 0, targetPoint); //add elem to new place in list\r\n        const newPointsFiltered = newPoints.filter((el) => (el));// delete \"gaps\" from list\r\n\r\n        this.toCenter = targetPoint.geoObject.geometry.getCoordinates(); //save coords of target point\r\n        this.setState({\r\n            points: newPointsFiltered,\r\n        }, this.updateMap);\r\n    };\r\n\r\n    onMapPointDragStart = () => {\r\n        this.deleteOldPolyline();\r\n    };\r\n\r\n    createPointObj = (geoObj) => {\r\n        const id = new Date().getTime();\r\n\r\n        const geoObject = new ymaps.GeoObject({\r\n            geometry: {\r\n                type: \"Point\",\r\n                coordinates: geoObj.geometry.getCoordinates()\r\n            },\r\n            properties: {\r\n                name: geoObj.properties.get('name'),\r\n                hintContent: 'Перетащите метку при необходимости',\r\n                balloonContent: geoObj.properties.get('balloonContent')\r\n            },\r\n        }, {draggable: true});\r\n\r\n        return {\r\n            geoObject,\r\n            id\r\n        }\r\n    };\r\n\r\n    paintPolyline = () => {\r\n        this.deleteOldPolyline();\r\n        const {points} = this.state;\r\n        const polylineCoords = points.map(point => ( point.geoObject.geometry.getCoordinates() ));//create new arr with coords of all points\r\n\r\n        const polyline = new ymaps.Polyline(\r\n            polylineCoords,\r\n            {balloonContent: \"Route\"},\r\n            {\r\n                strokeColor: \"#000000\",\r\n                strokeWidth: 6,\r\n                strokeOpacity: 0.5\r\n            }\r\n        );\r\n        this.yaMap.geoObjects.add(polyline);//add polyline to map\r\n        this.route = polyline;//save polyline\r\n    };\r\n\r\n    deleteOldPolyline() {\r\n        this.yaMap.geoObjects.remove(this.route);\r\n        this.route = null;\r\n    }\r\n\r\n\r\n    handleInputChange = ({target: {value}}) => {\r\n        this.setState({\r\n            inputText: value\r\n        });\r\n    };\r\n\r\n    onEnterPress = ({key}) => {\r\n        const {inputText} = this.state;\r\n        if (inputText !== '' && key === 'Enter') {\r\n            this.addPoint();\r\n        }\r\n    };\r\n\r\n\r\n    render() {\r\n        const {inputText, tooltip, points} = this.state;\r\n        return (\r\n            <main className=\"main\">\r\n                <div className=\"pointsWrap\">\r\n                    <Input value={inputText}\r\n                           handleInputChange={this.handleInputChange}\r\n                           onEnterPress={this.onEnterPress}\r\n                           tooltip={tooltip}/>\r\n                    <PointsList points={points}\r\n                                deletePoint={this.deletePoint}/>\r\n                </div>\r\n                <Map/>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\n\nimport AppWrapper from './components/app-wrapper/AppWrapper';\nimport Title from './components/title/Title';\nimport Main from './container/main/Main';\n\nimport './App.css';\n\n\nconst App = () => (\n    <AppWrapper>\n        <Title text=\"Route Editor\"/>\n        <Main/>\n    </AppWrapper>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}