{"version":3,"sources":["Components/PlayerBoard/index.js","Components/Row.js","Components/Container.js","Components/Button.js","Components/Square/index.js","Components/Board/index.js","Components/EnemyBoard/index.js","Components/Tooltip/index.js","functions.js","Components/Main.js","Components/Header.js","App.js","serviceWorker.js","index.js"],"names":["WrappedBoard","Row","_ref","children","react_default","a","createElement","className","Container","Button","onClick","Square","nextProps","value","this","props","_this$props","enemy","concat","calculateClass","Component","Board","renderSquare","i","_this","squares","Square_Square","key","bind","Object","assertThisInitialized","divideToRows","arr","rows","_loop","row","slice","map","_","j","push","numHeaders","letters","letter","table","PlayerBd","_Component","PlayerBoard","_getPrototypeOf2","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","handleClick","build","inherits","createClass","_this2","assign","EnemyBd","EnemyBoard","turn","addEnemyFunctional","Tooltip","currentShipName","winner","playerFreePoints","shipName","hasOwnProperty","availableShipsAmount","currentShipSize","keys","indexOf","calculateAvailableValues","arrOfClickedElems","minVal","Math","min","toConsumableArray","maxVal","max","result","dif","checkLeftBorder","checkRightBorder","filterElemsOutOfRange","calculateHalo","filter","elem","item","pos","some","borderElem","Main","state","playerSquares","fill","enemySquares","vedette","destroyer","cruiser","battleship","playerTurn","resetGameProperties","player","currentShipForBuild","reservedSquares","availableVals","from","builtShips","ships","getOwnPropertyNames","shipKey","currentShip","freePoints","builtShipsCopy","aliveShipsAmount","currentShipForKill","alreadyShot","squaresForShot","startNewGame","setState","buildEnemyShips","buildPlayerShips","index","alert","includes","randomAvaliableSquare","floor","random","isNaN","playerFlag","target","newSquares","newPoints","objectSpread","currentShipBuildingPointsArr","points","pop","vedettsAmount","halo","JSON","parse","stringify","newArr","handleEnemyBoardClick","_this$state","newEnemySquares","kindOfShip","currentShipKindArr","forEach","elemNumber","splice","arrNumber","square","letEnemyTurn","_this$state2","candidatesForKill","isShipKilled","_loop2","_this$enemy","randomSquareForShot","_this$state3","Fragment","Components_Container","Components_Row","Tooltip_Tooltip","Components_PlayerBoard","Components_EnemyBoard","Components_Button","Header","heading","App","Components_Header","Components_Main","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2NAQ6BA,iGCCdC,EANH,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,SAAF,OACRC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACVJ,ICIMK,EANG,SAAAN,GAAA,IAAEC,EAAFD,EAAEC,SAAF,OACdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVJ,ICIMM,EANA,SAAAP,GAAA,IAAEC,EAAFD,EAAEC,SAAUO,EAAZR,EAAYQ,QAAZ,OACXN,EAAAC,EAAAC,cAAA,UAAQI,QAASA,EAASH,UAAU,uCAC/BJ,WCDYQ,uMACKC,GAClB,OAAOA,EAAUC,QAAUC,KAAKC,MAAMF,uCAkBjC,IAAAG,EACyBF,KAAKC,MAA9BF,EADAG,EACAH,MAAOI,EADPD,EACOC,MAAOP,EADdM,EACcN,QACnB,OACIN,EAAAC,EAAAC,cAAA,MACIC,UAAS,UAAAW,OAAYP,EAAOQ,eAAeN,EAAOI,IAClDP,QAASA,6CApBCG,EAAOI,GACzB,OAAQJ,GACJ,IAAK,QACD,MAAO,GACX,IAAK,OACD,OAAII,EAAc,GACX,OACX,IAAK,SACD,MAAO,SACX,IAAK,OACD,MAAO,eAfaG,cCCfC,oNACjBC,aAAe,SAACC,GAAM,IAAAP,EACcQ,EAAKT,MAAhCU,EADaT,EACbS,QAASR,EADID,EACJC,MAAOP,EADHM,EACGN,QACrB,OACIN,EAAAC,EAAAC,cAACoB,EAAD,CACIC,IAAKJ,EACLV,MAAOY,EAAQF,GACfN,MAAOA,EACPP,QAASA,EAAQkB,KAARC,OAAAC,EAAA,EAAAD,CAAAL,GAAmBD,QAKxCQ,aAAe,SAACC,GAEZ,IADA,IAAIC,EAAO,GADSC,EAAA,SAEXX,GACL,IACIY,EADSH,EAAII,MAAMb,EAAGA,EAAI,IACbc,IAAI,SAACC,EAAGC,GAAJ,OACjBf,EAAKF,aAAaiB,EAAIhB,KAE1BU,EAAKO,KAAKL,IALLZ,EAAI,EAAGA,EAAI,IAAKA,GAAK,GAAIW,EAAzBX,GAOT,OAAOU,2EAIP,IAAIQ,EAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAEzCC,EADgB,CAAC,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1CL,IAAI,SAACM,EAAQpB,GAAT,OAC5BnB,EAAAC,EAAAC,cAAA,MAAIqB,IAAKgB,GAASA,KAIlBC,EADO9B,KAAKiB,aAAajB,KAAKC,MAAMU,SACvBY,IAAI,SAACF,EAAKZ,GAAN,OACjBnB,EAAAC,EAAAC,cAAA,MAAIqB,IAAKJ,GACLnB,EAAAC,EAAAC,cAAA,UAAKmC,EAAWlB,IACfY,KAIT,OACI/B,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACbH,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UAAKoC,GACJE,WA5CcxB,cLCpByB,GAEc7C,EAJQqB,EAIM,SAAAyB,GAAA,SAAAC,IAAA,IAAAC,EAAAxB,EAAAK,OAAAoB,EAAA,EAAApB,CAAAf,KAAAiC,GAAA,QAAAG,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAA/B,EAAAK,OAAA2B,EAAA,EAAA3B,CAAAf,MAAAkC,EAAAnB,OAAA4B,EAAA,EAAA5B,CAAAkB,IAAAW,KAAAC,MAAAX,EAAA,CAAAlC,MAAAI,OAAAmC,MAEnCO,YAAc,SAACrC,GACXC,EAAKT,MAAM8C,MAAMtC,IAHcC,EAAA,OAAAK,OAAAiC,EAAA,EAAAjC,CAAAkB,EAAAD,GAAAjB,OAAAkC,EAAA,EAAAlC,CAAAkB,EAAA,EAAApB,IAAA,SAAAd,MAAA,WAM1B,IAAAmD,EAAAlD,KACL,OACIV,EAAAC,EAAAC,cAACN,EAAD6B,OAAAoC,OAAA,CACI1D,UAAU,MACVkB,QAASX,KAAKC,MAAMU,QACpBf,QAAS,SAACa,GAAD,OAAOyC,EAAKJ,YAAYrC,IACjCN,OAAO,GACHH,KAAKC,YAbcgC,EAAA,CACb3B,cML9B,IAEe8C,EAEf,SAA4BlE,GAkCxB,OAlCsC,SAAA8C,GAAA,SAAAqB,IAAA,IAAAnB,EAAAxB,EAAAK,OAAAoB,EAAA,EAAApB,CAAAf,KAAAqD,GAAA,QAAAjB,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAA/B,EAAAK,OAAA2B,EAAA,EAAA3B,CAAAf,MAAAkC,EAAAnB,OAAA4B,EAAA,EAAA5B,CAAAsC,IAAAT,KAAAC,MAAAX,EAAA,CAAAlC,MAAAI,OAAAmC,MAUlCO,YAAc,SAACrC,GACXC,EAAKT,MAAML,QAAQa,IAXWC,EAAA,OAAAK,OAAAiC,EAAA,EAAAjC,CAAAsC,EAAArB,GAAAjB,OAAAkC,EAAA,EAAAlC,CAAAsC,EAAA,EAAAxC,IAAA,oBAAAd,MAAA,WAG9BC,KAAKC,MAAM8C,UAHmB,CAAAlC,IAAA,qBAAAd,MAAA,WAO9BC,KAAKC,MAAMqD,SAPmB,CAAAzC,IAAA,SAAAd,MAAA,WAe9B,OACIT,EAAAC,EAAAC,cAACN,EAAD6B,OAAAoC,OAAA,CACI1D,UAAU,MACVkB,QAASX,KAAKC,MAAMU,QACpBf,QAASI,KAAK8C,YACd3C,OAAO,GACHH,KAAKC,YArBaoD,EAAA,CACb/C,aALbiD,CAAmBhD,aCAdiD,mLACR,IAgBDC,EAhBCvD,EAC4BF,KAAKC,MAAjCyD,EADAxD,EACAwD,OAAQC,EADRzD,EACQyD,iBAGb,GAAID,EACA,OACIpE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,WACgB,UAAXkE,EAAqB,eAAiB,oBAE3CpE,EAAAC,EAAAC,cAAA,WACKkE,EADL,WAOZ,IAAK,IAAIE,KAAYD,EACjB,GAAIA,EAAiBE,eAAeD,KACU,IAAtCD,EAAiBC,GAAUtB,SAC3BmB,EAAkBG,IAIjBH,GACD,OACInE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,0BAOpB,IAAIsE,EAAuBH,EAAiBF,GAAiBnB,OAIzDyB,EADY,CAAC,EAAG,EAAG,EAAG,GAFVhD,OAAOiD,KAAKL,GACDM,QAAQR,IAInC,OACInE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,qBACcuE,EADd,IACgCA,EAAkB,EAAI,WAAa,GADnE,UAC8EA,EAAkB,EAAI,IAAM,GAD1G,aACwHN,EADxH,KAIAnE,EAAAC,EAAAC,cAAA,8BACuBsE,EAAuB,EAAIA,EAAuB,GADzE,QACkFA,EAAuB,EAAI,IAAM,GADnH,0BAhDqBxD,aCFrC,SAAS4D,EAAyBC,GAC9B,IAAIC,EAASC,KAAKC,IAALzB,MAAAwB,KAAItD,OAAAwD,EAAA,EAAAxD,CAAQoD,IACrBK,EAASH,KAAKI,IAAL5B,MAAAwB,KAAItD,OAAAwD,EAAA,EAAAxD,CAAQoD,IACrBO,EAAS,GACTC,EAAMH,EAASJ,EAcnB,OAZY,IAARO,GACAD,EAAS,CAACN,EAAS,GAAIA,EAAS,IAC3BQ,EAAgBR,KAASM,EAASA,EAAOtE,OAAO,CAACgE,EAAS,KAC1DS,EAAiBT,KAASM,EAASA,EAAOtE,OAAO,CAACgE,EAAS,MACjD,IAARO,GAAqB,IAARA,GAAqB,IAARA,GAC5BC,EAAgBR,KAASM,EAASA,EAAOtE,OAAO,CAACgE,EAAS,KAC1DS,EAAiBL,KAASE,EAASA,EAAOtE,OAAO,CAACoE,EAAS,MACjD,KAARG,GAAsB,KAARA,GAAsB,KAARA,IAGnCD,EAAS,CAFTN,GAAkB,GAClBI,GAAkB,KAGfM,EAAsBJ,EAAQ,EAAG,KAG5C,SAASK,EAAc7D,GACnB,IAAIkD,EAASC,KAAKC,IAALzB,MAAAwB,KAAItD,OAAAwD,EAAA,EAAAxD,CAAQG,IACrBsD,EAASH,KAAKI,IAAL5B,MAAAwB,KAAItD,OAAAwD,EAAA,EAAAxD,CAAQG,IACrBwD,EAAS,CAACN,EAAS,GAAIA,EAAS,IAE/BQ,EAAgBR,KAASM,EAASA,EAAOtE,OAAO,CAACgE,EAAS,EAAGA,EAAS,GAAIA,EAAS,KACnFS,EAAiBT,KAASM,EAASA,EAAOtE,OAAO,CAACgE,EAAS,EAAGA,EAAS,GAAIA,EAAS,KAEzF,IAAIO,EAAMH,EAASJ,EAkBnB,OAhBIO,GAAO,KACPD,EAASA,EAAOtE,OAAO,CAACoE,EAAS,GAAIA,EAAS,KACzCI,EAAgBJ,KAASE,EAASA,EAAOtE,OAAO,CAACoE,EAAS,EAAGA,EAAS,GAAIA,EAAS,KACnFK,EAAiBL,KAASE,EAASA,EAAOtE,OAAO,CAACoE,EAAS,EAAGA,EAAS,GAAIA,EAAS,MAGzFG,EAAM,GAAKA,GAAO,IAClBD,EAASA,EAAOM,OAAO,SAAAC,GAAI,OAAIA,IAAST,EAAS,GAAKS,IAASb,EAAS,KAGxEO,GAAO,IAAMA,GAAO,KACpBD,EAASA,EAAOM,OAAO,SAAAC,GAAI,OAAIA,IAAST,EAAS,IAAMS,IAASb,EAAS,MAI7EM,GADAA,EAASI,EAAsBJ,EAAQ,EAAG,MAC1BM,OAAO,SAACE,EAAMC,GAAP,OAAeT,EAAOT,QAAQiB,KAAUC,IAInE,SAASP,EAAgB7E,GAErB,MADiB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACnCqF,KAAK,SAACC,GAAD,OAAgBA,IAAetF,IAG1D,SAAS8E,EAAiB9E,GAEtB,MADkB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACnCqF,KAAK,SAACC,GAAD,OAAgBA,IAAetF,IAG3D,SAAS+E,EAAsB5D,EAAKoD,EAAKG,GACrC,OAAOvD,EAAI8D,OAAO,SAAAC,GAAI,OAAIA,GAAQX,GAAOW,EAAOR,QC+SrCa,cAtVX,SAAAA,EAAYrF,GAAO,IAAAS,EAAA,OAAAK,OAAAoB,EAAA,EAAApB,CAAAf,KAAAsF,IACf5E,EAAAK,OAAA2B,EAAA,EAAA3B,CAAAf,KAAAe,OAAA4B,EAAA,EAAA5B,CAAAuE,GAAA1C,KAAA5C,KAAMC,KAdVsF,MAAQ,CACJC,cAAe,IAAIhD,MAAM,KAAKiD,KAAK,SACnCC,aAAc,IAAIlD,MAAM,KAAKiD,KAAK,SAClC9B,iBAAkB,CACdgC,QAAS,CAAC,EAAG,EAAG,EAAG,GACnBC,UAAW,CAAC,EAAG,EAAG,GAClBC,QAAS,CAAC,EAAG,GACbC,WAAY,CAAC,IAEjBC,WAAY,KACZrC,OAAQ,IAGOhD,EAKnBsF,oBAAsB,WAClBtF,EAAKuF,OAAS,CACVC,oBAAqB,GACrBC,gBAAiB,GACjBC,cAAe5D,MAAM6D,KAAK,IAAI7D,MAAM,KAAKwB,QACzCsC,WAAY,GACZC,MAAOxF,OAAOyF,oBAAoB9F,EAAK6E,MAAM5B,mBAEjDjD,EAAKuF,OAAOQ,QAAU/F,EAAKuF,OAAOM,MAAMjE,OAAS,EACjD5B,EAAKuF,OAAOS,YAAchG,EAAKuF,OAAOM,MAAM7F,EAAKuF,OAAOQ,SAExD/F,EAAKP,MAAQ,CACTQ,QAAS,IAAI6B,MAAM,KAAKiD,KAAK,SAC7BkB,WAAY,CACRhB,QAAS,CAAC,EAAG,EAAG,EAAG,GACnBC,UAAW,CAAC,EAAG,EAAG,GAClBC,QAAS,CAAC,EAAG,GACbC,WAAY,CAAC,IAEjBI,oBAAqB,GACrBC,gBAAiB,GACjBC,cAAe5D,MAAM6D,KAAK,IAAI7D,MAAM,KAAKwB,QACzCsC,WAAY,CACRX,QAAS,GACTC,UAAW,GACXC,QAAS,GACTC,WAAY,IAEhBc,eAAgB,GAChBC,iBAAkB,GAElBC,mBAAoB,GACpBC,YAAa,GACbC,eAAgBxE,MAAM6D,KAAK,IAAI7D,MAAM,KAAKwB,SAE9CtD,EAAKP,MAAMoG,MAAQxF,OAAOyF,oBAAoB9F,EAAKP,MAAMwG,YACzDjG,EAAKP,MAAMsG,QAAU/F,EAAKP,MAAMoG,MAAMjE,OAAS,EAC/C5B,EAAKP,MAAMuG,YAAchG,EAAKP,MAAMoG,MAAM7F,EAAKP,MAAMsG,UA1CtC/F,EA6CnBuG,aAAe,WACXvG,EAAKwG,SAAS,CACV1B,cAAe,IAAIhD,MAAM,KAAKiD,KAAK,SACnCC,aAAc,IAAIlD,MAAM,KAAKiD,KAAK,SAClC9B,iBAAkB,CACdgC,QAAS,CAAC,EAAG,EAAG,EAAG,GACnBC,UAAW,CAAC,EAAG,EAAG,GAClBC,QAAS,CAAC,EAAG,GACbC,WAAY,CAAC,IAEjBC,WAAY,KACZrC,OAAQ,IACT,WACChD,EAAKsF,sBACLtF,EAAKyG,qBA3DMzG,EA+DnB0G,iBAAmB,SAACC,GAAU,IACrBjB,EAAiB1F,EAAKuF,OAAtBG,cACAA,IAGwB,IAAzBA,EAAc9D,SACdgF,MAAM,8DACN5G,EAAKuG,gBAGLb,EAAcmB,SAASF,IACvB3G,EAAKqC,MAAMsE,GAAO,KA1EP3G,EA8EnByG,gBAAkB,WAEd,KAAOzG,EAAKP,MAAMwG,WAAWhB,QAAQrD,QAAQ,KACpC8D,EAAiB1F,EAAKP,MAAtBiG,cAEDoB,EAAwBpB,EADjB/B,KAAKoD,MAAMpD,KAAKqD,SAAWtB,EAAc9D,SAIpD,GAAIqF,MAAMH,GAEN,YADA9G,EAAKuG,eAITvG,EAAKqC,MAAMyE,GAAuB,KA3FvB9G,EA+FnBqC,MAAQ,SAACsE,EAAOO,GACZ,IAAIC,EAAQC,EAAYC,EAEpBH,GACAC,EAASnH,EAAKuF,OACd6B,EAAU/G,OAAAwD,EAAA,EAAAxD,CAAOL,EAAK6E,MAAMC,eAC5BuC,EAAShH,OAAAiH,EAAA,EAAAjH,CAAA,GAAOL,EAAK6E,MAAM5B,oBAE3BkE,EAASnH,EAAKP,MACd2H,EAAU/G,OAAAwD,EAAA,EAAAxD,CAAOL,EAAKP,MAAMQ,SAC5BoH,EAAShH,OAAAiH,EAAA,EAAAjH,CAAA,GAAOL,EAAKP,MAAMwG,aAG/B,IAAIsB,EAA+BF,EAAUF,EAAOnB,aAChDwB,EAASD,EAA6BA,EAA6B3F,OAAS,GAEhFuF,EAAO3B,oBAAoBxE,KAAK2F,GAEhC,IAAIjB,EAAgBlC,EAAyB2D,EAAO3B,qBAiBpD,GAhBA2B,EAAOzB,cAAgBA,EAAcpB,OAAO,SAAAC,GAAI,OAAK4C,EAAO1B,gBAAgBoB,SAAStC,KAErF6C,EAAWT,GAAS,OAEhBO,EACAlH,EAAKwG,SAAS,CACV1B,cAAesC,IAGnBpH,EAAKP,MAAMQ,QAAUmH,EAGzBI,IACAD,EAA6BE,MAGzBD,EAAS,EAAG,CACZ,IAGIE,EAHAC,EAAOtD,EAAc8C,EAAO3B,qBAchC,GAbA2B,EAAO1B,gBAAP,GAAA/F,OAAAW,OAAAwD,EAAA,EAAAxD,CAA6B8G,EAAO1B,iBAApCpF,OAAAwD,EAAA,EAAAxD,CAAwD8G,EAAO3B,qBAA/DnF,OAAAwD,EAAA,EAAAxD,CAAuFsH,IAGnFT,GACAC,EAAOvB,WAAP,GAAAlG,OAAAW,OAAAwD,EAAA,EAAAxD,CAAwB8G,EAAOvB,YAA/BvF,OAAAwD,EAAA,EAAAxD,CAA8C8G,EAAO3B,sBACrDkC,EAAgB1H,EAAK6E,MAAM5B,iBAAiBgC,UAE5CkC,EAAOvB,WAAWuB,EAAOnB,aAAahF,KAAKmG,EAAO3B,qBAClD2B,EAAOjB,eAAiB0B,KAAKC,MAAMD,KAAKE,UAAUX,EAAOvB,aACzD8B,EAAgB1H,EAAKP,MAAMwG,WAAWhB,SAItCtB,KAAKI,IAAL5B,MAAAwB,KAAItD,OAAAwD,EAAA,EAAAxD,CAAQqH,IAAiB,EAa7B,YAZIR,GAEAlH,EAAKuF,OAAOG,cAAgB,KAC5B1F,EAAKwG,SAAS,CACVnB,YAAY,KAIhBrF,EAAKwG,SAAS,CACVxB,aAAchF,EAAKP,MAAMQ,WAMrCkH,EAAO3B,oBAAsB,GAC7B,IAAIuC,EAASjG,MAAM6D,KAAK,IAAI7D,MAAM,KAAKwB,QACvC6D,EAAOzB,cAAgBqC,EAAOzD,OAAO,SAAAC,GAAI,OAAK4C,EAAO1B,gBAAgBoB,SAAStC,KAGlC,IAAxCgD,EAA6B3F,SAC7BuF,EAAOpB,UACPoB,EAAOnB,YAAcmB,EAAOtB,MAAMsB,EAAOpB,eAI7CwB,EAA6BvG,KAAKwG,GAC9BN,EACAlH,EAAKwG,SAAS,CACVP,WAAYoB,IAGhBF,EAAOlB,WAAaoB,GAlLbrH,EAuLnBgI,sBAAwB,SAACrB,GAAU,IAAAsB,EACUjI,EAAK6E,MAAzC7B,EAD0BiF,EAC1BjF,OAAQqC,EADkB4C,EAClB5C,WAAYL,EADMiD,EACNjD,aACzB,IAAIhC,EAAJ,CACA,IAAIkF,EAAkBlD,EAAapE,QACnC,GAAIyE,EACA,GAA+B,SAA3B6C,EAAgBvB,GAAmB,CACnCuB,EAAgBvB,GAAS,SADU,IAK9Bf,EAAc5F,EAAKP,MAAnBmG,WAL8BlF,EAAA,SAM1ByH,GACL,GAAIvC,EAAWzC,eAAegF,GAAa,CACvC,IAAIC,EAAqBxC,EAAWuC,GACpCC,EAAmBC,QAAQ,SAAA7H,GACvBA,EAAI6H,QAAQ,SAAA9D,GACR,GAAIA,IAASoC,EAAO,CAChB,IAAI2B,EAAa9H,EAAI+C,QAAQgB,GAK7B,GAJA/D,EAAI+H,OAAOD,EAAY,GAInB9H,EAAIoB,OAAS,EAAG,CAChB,IAAI4G,EAAYJ,EAAmB7E,QAAQ/C,GAEhC6D,EADYrE,EAAKP,MAAvByG,eACmCiC,GAAYK,IAC/CH,QAAQ,SAAAI,GACTP,EAAgBO,GAAU,SAE9BzI,EAAKP,MAAM0G,2BAlBnC,IAAK,IAAIgC,KAAcvC,EAAYlF,EAA1ByH,GA0BTnI,EAAKwG,SAAS,CACVxB,aAAckD,IAIblI,EAAKP,MAAM0G,kBACZnG,EAAKwG,SAAS,CACVxD,OAAQ,eAGkB,UAA3BkF,EAAgBvB,KACvBuB,EAAgBvB,GAAS,OACzB3G,EAAKwG,SAAS,CACVxB,aAAckD,EACd7C,YAAY,OA1OTrF,EAgPnB0I,aAAe,WAAM,IAAAC,EACyB3I,EAAK6E,MAA1C7B,EADY2F,EACZ3F,OAAQqC,EADIsD,EACJtD,WAAYP,EADR6D,EACQ7D,cACzB,IAAI9B,EAGJ,IAFA,IACI4F,EAAmBC,EADnBzB,EAAatC,EAAclE,QAHdkI,EAAA,eAAAC,EAM2C/I,EAAKP,MAAxD6G,EANQyC,EAMRzC,eAAgBF,EANR2C,EAMQ3C,mBAAoBC,EAN5B0C,EAM4B1C,YAErC2C,EAAsB1C,EADf3C,KAAKoD,MAAMpD,KAAKqD,SAAWV,EAAe1E,SAGrD,GAAwC,SAApCwF,EAAW4B,GAAiC,CAC5C5B,EAAW4B,GAAuB,SADU,IAEvCpD,EAAc5F,EAAKuF,OAAnBK,WAGD0C,EAAa1C,EAAWrC,QAAQ6D,EAAW4B,IAmB/C,GAlBApD,EAAW2C,OAAOD,EAAY,GAG1B1C,EAAWhE,OAAS,IACpBoB,EAAS,QACThD,EAAKwG,SAAS,CACVxD,OAAQA,KAGhBhD,EAAKuF,OAAOK,WAAaA,EAEzBQ,EAAmBpF,KAAKgI,GACxBJ,EAAoBpF,EAAyB4C,GAC7CyC,GAAgBD,EAAkBlE,KAAK,SAAA+D,GAAM,MAA2B,SAAvBrB,EAAWqB,KAC5DpC,EAAYrF,KAAKgI,GAIbH,EAAc,CACd,IAAIlB,EAAOtD,EAAc+B,GACzBC,EAAW,GAAA3G,OAAAW,OAAAwD,EAAA,EAAAxD,CAAOgG,GAAPhG,OAAAwD,EAAA,EAAAxD,CAAuBsH,IAClCA,EAAKU,QAAQ,SAAAI,GACTrB,EAAWqB,GAAU,SAEzBnC,EAAiBxE,MAAM6D,KAAK,IAAI7D,MAAM,KAAKwB,QAC3C8C,EAAqB,QAGrBE,EAAiBsC,MAEsB,UAApCxB,EAAW4B,KAElB3C,EAAYrF,KAAKgI,GACb5C,EAAmBxE,OAAS,IAC5B0E,EAAiBxE,MAAM6D,KAAK,IAAI7D,MAAM,KAAKwB,SAE/C8D,EAAW4B,GAAuB,OAClC3D,GAAa,GAEjBiB,EAAiBA,EAAehC,OAAO,SAAAC,GAAI,OAAK8B,EAAYQ,SAAStC,KACrEvE,EAAKP,MAAM6G,eAAiBA,EAC5BtG,EAAKP,MAAM2G,mBAAqBA,EAChCpG,EAAKP,MAAM4G,YAAcA,EACzBrG,EAAKwG,SAAS,CACVnB,WAAYA,EACZP,cAAesC,MAxDfpE,IAAyB,IAAfqC,GAAsByD,KAnPxC9I,EAAKsF,sBAFUtF,wEAkTV,IAAAiJ,EACyD3J,KAAKuF,MAA9D5B,EADAgG,EACAhG,iBAAkBD,EADlBiG,EACkBjG,OAAQ8B,EAD1BmE,EAC0BnE,cAAeE,EADzCiE,EACyCjE,aAC9C,OACIpG,EAAAC,EAAAC,cAAAF,EAAAC,EAAAqK,SAAA,KACItK,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACqK,EAAD,KACIvK,EAAAC,EAAAC,cAACsK,EAAD,KACIxK,EAAAC,EAAAC,cAACuK,EAAD,CACIpG,iBAAkBA,EAClBD,OAAQA,KAGhBpE,EAAAC,EAAAC,cAACsK,EAAD,KACIxK,EAAAC,EAAAC,cAACwK,EAAD,CACIrJ,QAAS6E,EACT5F,QAASI,KAAKoH,mBAElB9H,EAAAC,EAAAC,cAACyK,EAAD,CACItJ,QAAS+E,EACT3C,MAAO/C,KAAKmH,gBACZ7D,KAAMtD,KAAKoJ,aACXxJ,QAASI,KAAK0I,yBAGtBpJ,EAAAC,EAAAC,cAACsK,EAAD,KACIxK,EAAAC,EAAAC,cAAC0K,EAAD,CAAQtK,QAASI,KAAKiH,cAAtB,8CAzVT3G,aCSJ6J,EAbA,SAAA/K,GAAA,IAAEgL,EAAFhL,EAAEgL,QAAF,OACX9K,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAACqK,EAAD,KACIvK,EAAAC,EAAAC,cAACsK,EAAD,KACIxK,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBACT2K,OCINC,EAPH,kBACR/K,EAAAC,EAAAC,cAAAF,EAAAC,EAAAqK,SAAA,KACItK,EAAAC,EAAAC,cAAC8K,EAAD,CAAQF,QAAQ,eAChB9K,EAAAC,EAAAC,cAAC+K,EAAD,QCCFC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhG,QACf0F,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,gHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC3FjEC,IAASC,OAAO5M,EAAAC,EAAAC,cAAC2M,EAAD,MAASC,SAASC,eAAe,SDiB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,GAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,OAAQ,WAC9B,IAAM3B,EAAK,GAAA3K,OAAMmM,GAAN,sBAEP/B,GAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,GACHK,KAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAY5I,QAAQ,cAG5CgH,UAAUC,cAAc+B,MAAM7B,KAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,KAAK,WAC7BV,OAAOC,SAASwC,aAKpBrC,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEArFAwB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,KAAK,WACjCO,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,MC5C/BG","file":"static/js/main.420b727a.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Board from '../Board/index';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst PlayerBd = addPlayerFunctional(Board);\r\n\r\nexport default PlayerBd;\r\n\r\nfunction addPlayerFunctional(WrappedBoard) {\r\n    class PlayerBoard extends Component {\r\n        handleClick = (i) => {\r\n            this.props.build(i);\r\n        };\r\n\r\n        render() {\r\n            return (\r\n                <WrappedBoard\r\n                    className=\"col\"\r\n                    squares={this.props.squares}\r\n                    onClick={(i) => this.handleClick(i)}\r\n                    enemy={false}\r\n                    {...this.props}/>\r\n            )\r\n        }\r\n    }\r\n\r\n    PlayerBoard.propTypes = {\r\n        squares: PropTypes.array.isRequired,\r\n        build: PropTypes.func\r\n    };\r\n\r\n    return PlayerBoard;\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst Row = ({children}) => (\r\n    <div className=\"row justify-content-center\">\r\n        {children}\r\n    </div>\r\n);\r\n\r\nexport default Row;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst Container = ({children}) => (\r\n    <div className=\"container\">\r\n        {children}\r\n    </div>\r\n);\r\n\r\nexport default Container;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst Button = ({children, onClick}) => (\r\n    <button onClick={onClick} className=\"button col-xl-6 col-sm-8 col-xxs-10\">\r\n        {children}\r\n    </button>\r\n);\r\n\r\nexport default Button;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\n\r\nexport default class Square extends Component {\r\n    shouldComponentUpdate(nextProps) {\r\n        return nextProps.value !== this.props.value\r\n    }\r\n\r\n    static calculateClass(value, enemy) {\r\n        switch (value) {\r\n            case 'empty':\r\n                return '';\r\n            case 'boat':\r\n                if (enemy) return '';\r\n                return 'boat';\r\n            case 'killed':\r\n                return 'killed';\r\n            case 'miss':\r\n                return 'miss';\r\n            default:\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let {value, enemy, onClick} = this.props;\r\n        return (\r\n            <td\r\n                className={`square ${Square.calculateClass(value, enemy)}`}\r\n                onClick={onClick}>\r\n            </td>\r\n        )\r\n    }\r\n}\r\n\r\nSquare.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    enemy: PropTypes.bool.isRequired,\r\n    onClick: PropTypes.func\r\n};","import React, {Component} from 'react';\r\nimport Square from '../Square/index';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\n\r\nexport default class Board extends Component {\r\n    renderSquare = (i) => {\r\n        let {squares, enemy, onClick} = this.props;\r\n        return (\r\n            <Square\r\n                key={i}\r\n                value={squares[i]}\r\n                enemy={enemy}\r\n                onClick={onClick.bind(this, i)}\r\n            />\r\n        )\r\n    };\r\n\r\n    divideToRows = (arr) => {\r\n        let rows = [];\r\n        for (let i = 0; i < 100; i += 10) {\r\n            let arrRow = arr.slice(i, i + 10);\r\n            let row = arrRow.map((_, j) =>\r\n                this.renderSquare(j + i)\r\n            );\r\n            rows.push(row);\r\n        }\r\n        return rows;\r\n    };\r\n\r\n    render() {\r\n        let numHeaders = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n        let letterHeaders = ['', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'];\r\n        let letters = letterHeaders.map((letter, i) =>\r\n            <th key={letter}>{letter}</th>\r\n        );\r\n\r\n        let rows = this.divideToRows(this.props.squares);\r\n        let table = rows.map((row, i) =>\r\n            <tr key={i}>\r\n                <th>{numHeaders[i]}</th>\r\n                {row}\r\n            </tr>\r\n        );\r\n\r\n        return (\r\n            <table className=\"board\">\r\n                <tbody>\r\n                    <tr>{letters}</tr>\r\n                    {table}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n}\r\n\r\nBoard.propTypes = {\r\n    squares: PropTypes.array.isRequired,\r\n    enemy: PropTypes.bool.isRequired,\r\n    onClick: PropTypes.func\r\n};","import React, {Component} from 'react';\r\nimport Board from '../Board/index';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst EnemyBd = addEnemyFunctional(Board);\r\n\r\nexport default EnemyBd;\r\n\r\nfunction addEnemyFunctional(WrappedBoard) {\r\n    class EnemyBoard extends Component{\r\n        componentDidMount() {\r\n            this.props.build();\r\n        }\r\n\r\n        componentDidUpdate() {\r\n            this.props.turn();\r\n        }\r\n\r\n        handleClick = (i) => {\r\n            this.props.onClick(i);\r\n        };\r\n\r\n        render(){\r\n            return (\r\n                <WrappedBoard\r\n                    className=\"col\"\r\n                    squares={this.props.squares}\r\n                    onClick={this.handleClick}\r\n                    enemy={true}\r\n                    {...this.props}\r\n                />\r\n            )\r\n        }\r\n    }\r\n\r\n    EnemyBoard.propTypes = {\r\n        squares: PropTypes.array.isRequired,\r\n        build: PropTypes.func,\r\n        turn: PropTypes.func,\r\n        handleEnemyBoardClick: PropTypes.func,\r\n    };\r\n\r\n    return EnemyBoard;\r\n}\r\n\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css'\r\n\r\nexport default class Tooltip extends Component {\r\n    render() {\r\n        let {winner, playerFreePoints} = this.props;\r\n\r\n        //if winner is known, display him\r\n        if (winner) {\r\n            return (\r\n                <div className=\"tooltip \">\r\n                    <div>\r\n                        {winner === 'Enemy' ? 'Sorry but...' : 'Congratulations!'}\r\n                    </div>\r\n                    <div>\r\n                        {winner} wins!\r\n                    </div>\r\n                </div>)\r\n        }\r\n\r\n        let currentShipName;\r\n        for (let shipName in playerFreePoints) {\r\n            if (playerFreePoints.hasOwnProperty(shipName)) {\r\n                if (playerFreePoints[shipName].length !== 0) {\r\n                    currentShipName = shipName;\r\n                }\r\n\r\n                //if player built all ships display this\r\n                if (!currentShipName) {\r\n                    return (\r\n                        <div className=\"tooltip green\">\r\n                            <div>Now you can play!</div>\r\n                            <div>Your turn!</div>\r\n                        </div>)\r\n                }\r\n            }\r\n        }\r\n\r\n        //display tooltip with type of ship, its squares and amount of available ships\r\n        let availableShipsAmount = playerFreePoints[currentShipName].length;\r\n        let shipNames = Object.keys(playerFreePoints);\r\n        let shipNumber = shipNames.indexOf(currentShipName);\r\n        let shipSizes = [1, 2, 3, 4];\r\n        let currentShipSize = shipSizes[shipNumber];\r\n\r\n        return (\r\n            <div className=\"tooltip orange\">\r\n                <p>\r\n                    Click on {currentShipSize} {currentShipSize > 1 ? 'adjacent' : ''} square{currentShipSize > 1 ? 's' : ''} to build {currentShipName}.\r\n                </p>\r\n\r\n                <p>\r\n                    Now you can build {availableShipsAmount > 0 ? availableShipsAmount : ''} ship{availableShipsAmount > 1 ? 's' : ''} of this type.\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nTooltip.propTypes = {\r\n    winner: PropTypes.oneOf(['', 'Enemy', 'Player']).isRequired,\r\n    playerFreePoints: PropTypes.shape({\r\n        vedette: PropTypes.array,\r\n        destroyer: PropTypes.array,\r\n        cruiser: PropTypes.array,\r\n        battleship: PropTypes.array\r\n    }).isRequired\r\n};","export {calculateAvailableValues, calculateHalo};\r\n\r\nfunction calculateAvailableValues(arrOfClickedElems) {\r\n    let minVal = Math.min(...arrOfClickedElems);\r\n    let maxVal = Math.max(...arrOfClickedElems);\r\n    let result = [];\r\n    let dif = maxVal - minVal;\r\n\r\n    if (dif === 0) {\r\n        result = [minVal - 10, minVal + 10];\r\n        if (!checkLeftBorder(minVal)) result = result.concat([minVal - 1]);\r\n        if (!checkRightBorder(minVal)) result = result.concat([minVal + 1]);\r\n    } else if (dif === 1 || dif === 2 || dif === 3) {\r\n        if (!checkLeftBorder(minVal)) result = result.concat([minVal - 1]);\r\n        if (!checkRightBorder(maxVal)) result = result.concat([maxVal + 1]);\r\n    } else if (dif === 10 || dif === 20 || dif === 30) {\r\n        minVal = minVal - 10;\r\n        maxVal = maxVal + 10;\r\n        result = [minVal, maxVal];\r\n    }\r\n    return filterElemsOutOfRange(result, 0, 100);\r\n}\r\n\r\nfunction calculateHalo(arr) {\r\n    let minVal = Math.min(...arr);\r\n    let maxVal = Math.max(...arr);\r\n    let result = [minVal - 10, minVal + 10];\r\n\r\n    if (!checkLeftBorder(minVal)) result = result.concat([minVal - 1, minVal - 11, minVal + 9]);\r\n    if (!checkRightBorder(minVal)) result = result.concat([minVal + 1, minVal + 11, minVal - 9]);\r\n\r\n    let dif = maxVal - minVal;\r\n    //if (dif === 1 || dif === 2 || dif === 3 || dif === 10 || dif === 20 || dif === 30) {\r\n    if (dif <= 30) {\r\n        result = result.concat([maxVal - 10, maxVal + 10]);\r\n        if (!checkLeftBorder(maxVal)) result = result.concat([maxVal - 1, maxVal - 11, maxVal + 9]);\r\n        if (!checkRightBorder(maxVal)) result = result.concat([maxVal + 1, maxVal + 11, maxVal - 9]);\r\n    }\r\n\r\n    if (dif > 0 && dif <= 3) {\r\n        result = result.filter(elem => elem !== maxVal - 1 && elem !== minVal + 1);\r\n    }\r\n\r\n    if (dif >= 10 && dif <= 30) {\r\n        result = result.filter(elem => elem !== maxVal - 10 && elem !== minVal + 10);\r\n    }\r\n\r\n    result = filterElemsOutOfRange(result, 0, 100);\r\n    result = result.filter((item, pos) => result.indexOf(item) === pos); //filter repeating elements\r\n    return result;\r\n}\r\n\r\nfunction checkLeftBorder(value) {\r\n    let leftBorder = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\r\n    return leftBorder.some((borderElem) => borderElem === value);\r\n}\r\n\r\nfunction checkRightBorder(value) {\r\n    let rightBorder = [9, 19, 29, 39, 49, 59, 69, 79, 89, 99];\r\n    return rightBorder.some((borderElem) => borderElem === value);\r\n}\r\n\r\nfunction filterElemsOutOfRange(arr, min, max) {\r\n    return arr.filter(elem => elem >= min && elem < max);\r\n}\r\n\r\n","import React, {Component} from 'react';\r\n\r\nimport Row from './Row';\r\nimport Container from './Container';\r\nimport Button from './Button';\r\nimport PlayerBoard from './PlayerBoard';\r\nimport EnemyBoard from './EnemyBoard';\r\nimport Tooltip from './Tooltip';\r\nimport {calculateAvailableValues, calculateHalo} from '../functions';\r\n\r\nclass Main extends Component {\r\n    state = {\r\n        playerSquares: new Array(100).fill('empty'),\r\n        enemySquares: new Array(100).fill('empty'),\r\n        playerFreePoints: {\r\n            vedette: [1, 1, 1, 1],\r\n            destroyer: [2, 2, 2],\r\n            cruiser: [3, 3],\r\n            battleship: [4]\r\n        },\r\n        playerTurn: null,\r\n        winner: ''\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.resetGameProperties();\r\n    }\r\n\r\n    resetGameProperties = () => {\r\n        this.player = {\r\n            currentShipForBuild: [],\r\n            reservedSquares: [],\r\n            availableVals: Array.from(new Array(100).keys()),\r\n            builtShips: [],\r\n            ships: Object.getOwnPropertyNames(this.state.playerFreePoints),\r\n        };\r\n        this.player.shipKey = this.player.ships.length - 1;\r\n        this.player.currentShip = this.player.ships[this.player.shipKey];\r\n\r\n        this.enemy = {\r\n            squares: new Array(100).fill('empty'),\r\n            freePoints: {\r\n                vedette: [1, 1, 1, 1],\r\n                destroyer: [2, 2, 2],\r\n                cruiser: [3, 3],\r\n                battleship: [4]\r\n            },\r\n            currentShipForBuild: [],\r\n            reservedSquares: [],\r\n            availableVals: Array.from(new Array(100).keys()),\r\n            builtShips: {\r\n                vedette: [],\r\n                destroyer: [],\r\n                cruiser: [],\r\n                battleship: []\r\n            },\r\n            builtShipsCopy: {},\r\n            aliveShipsAmount: 10,\r\n\r\n            currentShipForKill: [],\r\n            alreadyShot: [],\r\n            squaresForShot: Array.from(new Array(100).keys())\r\n        };\r\n        this.enemy.ships = Object.getOwnPropertyNames(this.enemy.freePoints);\r\n        this.enemy.shipKey = this.enemy.ships.length - 1;\r\n        this.enemy.currentShip = this.enemy.ships[this.enemy.shipKey];\r\n    };\r\n\r\n    startNewGame = () => {\r\n        this.setState({\r\n            playerSquares: new Array(100).fill('empty'),\r\n            enemySquares: new Array(100).fill('empty'),\r\n            playerFreePoints: {\r\n                vedette: [1, 1, 1, 1],\r\n                destroyer: [2, 2, 2],\r\n                cruiser: [3, 3],\r\n                battleship: [4]\r\n            },\r\n            playerTurn: null,\r\n            winner: ''\r\n        }, () => {\r\n            this.resetGameProperties();\r\n            this.buildEnemyShips();\r\n        });\r\n    };\r\n\r\n    buildPlayerShips = (index) => {\r\n        let {availableVals} = this.player;\r\n        if (!availableVals) return;\r\n\r\n        //warn user if he deadlocked, clean borders and start new game\r\n        if (availableVals.length === 0) {\r\n            alert('Your ship building deadlocked. Your board will be cleaned!');\r\n            this.startNewGame();\r\n        }\r\n\r\n        if (availableVals.includes(index)) {\r\n            this.build(index, true);\r\n        }\r\n    };\r\n\r\n    buildEnemyShips = () => {\r\n        //repeat while we have free building points\r\n        while (this.enemy.freePoints.vedette.length) {\r\n            let {availableVals} = this.enemy;\r\n            let rand = Math.floor(Math.random() * availableVals.length); //random value from interval\r\n            let randomAvaliableSquare = availableVals[rand];\r\n\r\n            //rebuilding when enemy ships deadlocked and enemy building phase not finished\r\n            if (isNaN(randomAvaliableSquare)) {\r\n                this.startNewGame();\r\n                return;\r\n            }\r\n\r\n            this.build(randomAvaliableSquare, false);\r\n        }\r\n    };\r\n\r\n    build = (index, playerFlag) => {\r\n        let target, newSquares, newPoints;\r\n\r\n        if (playerFlag) {\r\n            target = this.player;\r\n            newSquares = [...this.state.playerSquares];\r\n            newPoints = {...this.state.playerFreePoints};\r\n        } else {\r\n            target = this.enemy;\r\n            newSquares = [...this.enemy.squares];\r\n            newPoints = {...this.enemy.freePoints};\r\n        }\r\n\r\n        let currentShipBuildingPointsArr = newPoints[target.currentShip];//arr of current ship type points\r\n        let points = currentShipBuildingPointsArr[currentShipBuildingPointsArr.length - 1];//current ship points\r\n\r\n        target.currentShipForBuild.push(index); //save part of building ship\r\n\r\n        let availableVals = calculateAvailableValues(target.currentShipForBuild);\r\n        target.availableVals = availableVals.filter(elem => !target.reservedSquares.includes(elem)); //exclude reserved squares\r\n\r\n        newSquares[index] = 'boat';\r\n\r\n        if (playerFlag) {\r\n            this.setState({\r\n                playerSquares: newSquares\r\n            });\r\n        } else {\r\n            this.enemy.squares = newSquares;\r\n        }\r\n\r\n        points--; //decrease current ship points\r\n        currentShipBuildingPointsArr.pop();\r\n\r\n        //if current ship built, calculate halo, save ship and its halo in reservedSquares\r\n        if (points < 1) {\r\n            let halo = calculateHalo(target.currentShipForBuild);\r\n            target.reservedSquares = [...target.reservedSquares, ...target.currentShipForBuild, ...halo]; //include halo in reserved squares\r\n\r\n            let vedettsAmount;\r\n            if (playerFlag) {\r\n                target.builtShips = [...target.builtShips, ...target.currentShipForBuild];\r\n                vedettsAmount = this.state.playerFreePoints.vedette\r\n            } else {\r\n                target.builtShips[target.currentShip].push(target.currentShipForBuild);\r\n                target.builtShipsCopy = JSON.parse(JSON.stringify(target.builtShips));\r\n                vedettsAmount = this.enemy.freePoints.vedette\r\n            }\r\n\r\n\r\n            if (Math.max(...vedettsAmount) < 1) {\r\n                if (playerFlag) {\r\n                    //if player built all ships, let him play\r\n                    this.player.availableVals = null;\r\n                    this.setState({\r\n                        playerTurn: true\r\n                    });\r\n                } else {\r\n                    //if enemy built all ships, re-render enemy board\r\n                    this.setState({\r\n                        enemySquares: this.enemy.squares\r\n                    });\r\n                }\r\n                return;\r\n            }\r\n\r\n            target.currentShipForBuild = [];\r\n            let newArr = Array.from(new Array(100).keys());\r\n            target.availableVals = newArr.filter(elem => !target.reservedSquares.includes(elem));// exclude reserved squares\r\n\r\n            //if points of current ship type are 0, change current type of ship\r\n            if (currentShipBuildingPointsArr.length === 0) {\r\n                target.shipKey--;\r\n                target.currentShip = target.ships[target.shipKey];\r\n            }\r\n        } else {\r\n            //update current ship points amount\r\n            currentShipBuildingPointsArr.push(points);\r\n            if (playerFlag) {\r\n                this.setState({\r\n                    freePoints: newPoints\r\n                });\r\n            } else {\r\n                target.freePoints = newPoints;\r\n            }\r\n        }\r\n    };\r\n\r\n    handleEnemyBoardClick = (index) => {\r\n        let {winner, playerTurn, enemySquares} = this.state;\r\n        if (winner) return;\r\n        let newEnemySquares = enemySquares.slice();\r\n        if (playerTurn) {\r\n            if (newEnemySquares[index] === 'boat') {\r\n                newEnemySquares[index] = 'killed';\r\n\r\n                //search for killed square\r\n                //and delete it from array of builtShips\r\n                let {builtShips} = this.enemy;\r\n                for (let kindOfShip in builtShips) {\r\n                    if (builtShips.hasOwnProperty(kindOfShip)) {\r\n                        let currentShipKindArr = builtShips[kindOfShip];\r\n                        currentShipKindArr.forEach(arr => {\r\n                            arr.forEach(elem => {\r\n                                if (elem === index) {\r\n                                    let elemNumber = arr.indexOf(elem);\r\n                                    arr.splice(elemNumber, 1);\r\n\r\n                                    //if all part of ship killed, calculate and display halo\r\n                                    // and then decrease alive ships amount\r\n                                    if (arr.length < 1) {\r\n                                        let arrNumber = currentShipKindArr.indexOf(arr);\r\n                                        let {builtShipsCopy} = this.enemy;\r\n                                        let halo = calculateHalo(builtShipsCopy[kindOfShip][arrNumber]);\r\n                                        halo.forEach(square => {\r\n                                            newEnemySquares[square] = 'miss';\r\n                                        });\r\n                                        this.enemy.aliveShipsAmount--;\r\n                                    }\r\n                                }\r\n                            });\r\n                        });\r\n                    }\r\n                }\r\n\r\n                this.setState({\r\n                    enemySquares: newEnemySquares\r\n                });\r\n\r\n                //if all enemy ships killed set winner\r\n                if (!this.enemy.aliveShipsAmount) {\r\n                    this.setState({\r\n                        winner: 'Player'\r\n                    });\r\n                }\r\n            } else if (newEnemySquares[index] === 'empty') {\r\n                newEnemySquares[index] = 'miss';\r\n                this.setState({\r\n                    enemySquares: newEnemySquares,\r\n                    playerTurn: false\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    letEnemyTurn = () => {\r\n        let {winner, playerTurn, playerSquares} = this.state;\r\n        if (winner) return;\r\n        let newSquares = playerSquares.slice();\r\n        let candidatesForKill, isShipKilled;\r\n        while (!winner && playerTurn === false) {\r\n            let {squaresForShot, currentShipForKill, alreadyShot} = this.enemy;\r\n            let rand = Math.floor(Math.random() * squaresForShot.length); //random number from interval\r\n            let randomSquareForShot = squaresForShot[rand];\r\n\r\n            if (newSquares[randomSquareForShot] === 'boat') {\r\n                newSquares[randomSquareForShot] = 'killed';\r\n                let {builtShips} = this.player;\r\n\r\n                //delete killed square from array of builtShips\r\n                let elemNumber = builtShips.indexOf(newSquares[randomSquareForShot]);\r\n                builtShips.splice(elemNumber, 1);\r\n\r\n                //if all player ships are killed, set winner\r\n                if (builtShips.length < 1) {\r\n                    winner = 'Enemy';\r\n                    this.setState({\r\n                        winner: winner\r\n                    });\r\n                }\r\n                this.player.builtShips = builtShips;\r\n\r\n                currentShipForKill.push(randomSquareForShot);\r\n                candidatesForKill = calculateAvailableValues(currentShipForKill);\r\n                isShipKilled = !candidatesForKill.some(square => newSquares[square] === 'boat');\r\n                alreadyShot.push(randomSquareForShot);\r\n\r\n                //if current ship killed, display its halo\r\n                //next shot will be random\r\n                if (isShipKilled) {\r\n                    let halo = calculateHalo(currentShipForKill);\r\n                    alreadyShot = [...alreadyShot, ...halo];\r\n                    halo.forEach(square => {\r\n                        newSquares[square] = 'miss';\r\n                    });\r\n                    squaresForShot = Array.from(new Array(100).keys());\r\n                    currentShipForKill = [];\r\n                } else {\r\n                    //next shot will be to some of near squares\r\n                    squaresForShot = candidatesForKill;\r\n                }\r\n            } else if (newSquares[randomSquareForShot] === 'empty') {\r\n                //save this miss and highlight it on the board\r\n                alreadyShot.push(randomSquareForShot);\r\n                if (currentShipForKill.length < 1) {\r\n                    squaresForShot = Array.from(new Array(100).keys());\r\n                }\r\n                newSquares[randomSquareForShot] = 'miss';\r\n                playerTurn = true;\r\n            }\r\n            squaresForShot = squaresForShot.filter(elem => !alreadyShot.includes(elem));\r\n            this.enemy.squaresForShot = squaresForShot;\r\n            this.enemy.currentShipForKill = currentShipForKill;\r\n            this.enemy.alreadyShot = alreadyShot;\r\n            this.setState({\r\n                playerTurn: playerTurn,\r\n                playerSquares: newSquares\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let {playerFreePoints, winner, playerSquares, enemySquares} = this.state;\r\n        return (\r\n            <>\r\n                <main>\r\n                    <Container>\r\n                        <Row>\r\n                            <Tooltip\r\n                                playerFreePoints={playerFreePoints}\r\n                                winner={winner}/>\r\n                        </Row>\r\n\r\n                        <Row>\r\n                            <PlayerBoard\r\n                                squares={playerSquares}\r\n                                onClick={this.buildPlayerShips}/>\r\n\r\n                            <EnemyBoard\r\n                                squares={enemySquares}\r\n                                build={this.buildEnemyShips}\r\n                                turn={this.letEnemyTurn}\r\n                                onClick={this.handleEnemyBoardClick}/>\r\n                        </Row>\r\n\r\n                        <Row>\r\n                            <Button onClick={this.startNewGame}>\r\n                                Clean boards and start New Game\r\n                            </Button>\r\n                        </Row>\r\n                    </Container>\r\n                </main>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport Container from './Container';\r\nimport Row from './Row';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst Header = ({heading}) => (\r\n    <header>\r\n        <Container>\r\n            <Row>\r\n                <h1 className=\"header col-xl-12\">\r\n                    {heading}\r\n                </h1>\r\n            </Row>\r\n        </Container>\r\n    </header>\r\n\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './App.css';\r\n\r\nimport Main from './Components/Main';\r\nimport Header from './Components/Header';\r\n\r\n\r\nconst App = () => (\r\n    <>\r\n        <Header heading=\"Sea Battle\"/>\r\n        <Main/>\r\n    </>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {register} from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregister();\n\n"],"sourceRoot":""}