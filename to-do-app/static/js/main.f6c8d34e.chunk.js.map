{"version":3,"sources":["components/title/Title.js","components/todo-input/ToDoInput.js","components/todo-item/ToDoItem.js","components/todo-list/ToDoList.js","components/footer/Footer.js","containers/todo/ToDo.js","actions/actionCreator.js","constants.js","App.js","reducers/tasks.js","reducers/filters.js","store.js","reducers/index.js","serviceWorker.js","index.js"],"names":["Title","_ref","title","react_default","a","createElement","reactstrap_es","className","defaultProps","ToDoInput","value","onChange","onPlusClick","onEnterPress","onClick","placeholder","onKeyPress","ToDoItem","text","isCompleted","id","toggleTask","deleteTask","ToDoList","taskList","map","_ref2","components_todo_item_ToDoItem","key","FILTERS_BTN","Footer","amount","activeFilter","changeFilter","concat","ToDo","state","inputText","handleInputChange","target","_this","setState","addTask","length","props","Date","getTime","filterTasks","tasks","filter","task","getActiveTasks","this","_this$props","isTaskExists","filteredTasks","activeTasksAmount","Container","Row","Col","components_todo_input_ToDoInput","components_todo_list_ToDoList","components_footer_Footer","Component","connect","_ref3","type","App","Fragment","components_title_Title","containers_todo_ToDo","STATE","load","namespace","arguments","undefined","Object","toConsumableArray","preloadedState","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","save","Boolean","location","hostname","match","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f6c8d34e.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Title.css';\r\n\r\nimport {Container, Row, Col} from \"reactstrap/dist/reactstrap.es\";\r\n\r\n\r\nconst Title = ({title}) => (\r\n    <header>\r\n        <Container>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"title\">{title}</h1>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    </header>\r\n);\r\n\r\nTitle.propTypes = {\r\n    title: PropTypes.string\r\n};\r\n\r\nTitle.defaultProps = {\r\n    title: 'Title'\r\n};\r\n\r\nexport default Title;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './ToDoInput.css'\r\n\r\n\r\nconst ToDoInput = ({value, onChange, onPlusClick, onEnterPress}) => (\r\n    <div className='todo-input-wrapper'>\r\n        <i className='fas fa-plus'\r\n           onClick={onPlusClick}/>\r\n        <input\r\n            className='todo-input'\r\n            placeholder='Click to add task'\r\n            onChange={onChange}\r\n            value={value}\r\n            onKeyPress={onEnterPress}\r\n        />\r\n    </div>\r\n);\r\n\r\n\r\nToDoInput.propTypes = {\r\n    value: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    onPlusClick: PropTypes.func,\r\n    onEnterPress: PropTypes.func\r\n};\r\n\r\nToDoInput.defaultProps = {\r\n    value: '',\r\n    onChange: () => {},\r\n    onPlusClick: () => {},\r\n    onEnterPress: () => {}\r\n};\r\n\r\nexport default ToDoInput;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './ToDoItem.css';\r\n\r\n\r\nconst ToDoItem = ({text, isCompleted, id, toggleTask, deleteTask}) => (\r\n    <li className=\"todo-item\">\r\n        <i className={isCompleted ?\r\n                        'mark far fa-check-circle' : 'mark far fa-circle'}\r\n            onClick={() => toggleTask(id)}/>\r\n\r\n        <span className={isCompleted ?\r\n                            'completed text' : 'text'}>{text}</span>\r\n\r\n        <i className=\"fas fa-times\"\r\n           onClick={() => deleteTask(id)}/>\r\n    </li>\r\n);\r\n\r\n\r\nToDoItem.propTypes = {\r\n    text: PropTypes.string,\r\n    isCompleted: PropTypes.bool,\r\n    id: PropTypes.number,\r\n    toggleTask: PropTypes.func,\r\n    deleteTask: PropTypes.func,\r\n};\r\n\r\nToDoItem.defaultProps = {\r\n    text: '',\r\n    isCompleted: false,\r\n    id: 0,\r\n    toggleTask: () => {},\r\n    deleteTask: () => {},\r\n};\r\n\r\nexport default ToDoItem;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './ToDoList.css';\r\n\r\nimport ToDoItem from '../../components/todo-item/ToDoItem';\r\n\r\n\r\nconst ToDoList = ({taskList, toggleTask, deleteTask}) => (\r\n    <ul className=\"todo-list\">\r\n        {taskList.map(({id, text, isCompleted}) => (\r\n            <ToDoItem\r\n                key={id}\r\n                text={text}\r\n                isCompleted={isCompleted}\r\n                id={id}\r\n                toggleTask={toggleTask}\r\n                deleteTask={deleteTask}\r\n            />\r\n        ))}\r\n    </ul>\r\n);\r\n\r\n\r\nToDoList.propTypes = {\r\n    taskList: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.number,\r\n            text: PropTypes.string,\r\n            isCompleted: PropTypes.bool,\r\n        })\r\n    ),\r\n    toggleTask: PropTypes.func,\r\n    deleteTask: PropTypes.func\r\n};\r\n\r\nToDoList.defaultProps = {\r\n    taskList: {\r\n        id: 0,\r\n        text: '',\r\n        isCompleted: false\r\n    },\r\n    toggleTask: () => {},\r\n    deleteTask: () => {}\r\n};\r\n\r\n\r\nexport default ToDoList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Footer.css';\r\n\r\n\r\nconst FILTERS_BTN = [\r\n    {\r\n        text: 'all',\r\n        id: 'all'\r\n    },\r\n    {\r\n        text: 'Active',\r\n        id: 'active'\r\n    },\r\n    {\r\n        text: 'Completed',\r\n        id: 'completed'\r\n    }\r\n];\r\n\r\n\r\nconst Footer = ({amount, activeFilter, changeFilter}) => (\r\n    <div className='footer'>\r\n        <span className='amount'>{`${amount} Tasks left`}</span>\r\n        <div className='btn-group'>\r\n            {FILTERS_BTN.map(({text, id}) => (\r\n                <button\r\n                    key={id}\r\n                    className={id === activeFilter ? 'filter-btn active' : 'filter-btn'}\r\n                    onClick={() => changeFilter(id)}\r\n                >{text}</button>\r\n            ))}\r\n        </div>\r\n    </div>\r\n);\r\n\r\nFooter.propTypes = {\r\n    amount: PropTypes.number,\r\n    activeFilter: PropTypes.string,\r\n    changeFilter: PropTypes.func\r\n};\r\n\r\nFooter.defaultProps = {\r\n    amount: 0,\r\n    activeFilter: 'all',\r\n    changeFilter: () => {}\r\n};\r\n\r\nexport default Footer;","import React, {Component} from 'react';\r\n\r\nimport './ToDo.css';\r\n\r\nimport ToDoInput from '../../components/todo-input/ToDoInput';\r\nimport ToDoList from '../../components/todo-list/ToDoList';\r\nimport Footer from '../../components/footer/Footer';\r\nimport {Container, Row, Col} from 'reactstrap';\r\n\r\nimport {connect} from 'react-redux';\r\nimport {addTask, toggleTask, deleteTask, changeFilter} from '../../actions/actionCreator'\r\n\r\n\r\nclass ToDo extends Component {\r\n    state = {\r\n        inputText: ''\r\n    };\r\n\r\n    handleInputChange = ({target: {value}}) => {\r\n        this.setState({\r\n            inputText: value\r\n        })\r\n    };\r\n\r\n    onPlusClick = () => {\r\n        this.addTask();\r\n    };\r\n\r\n    onEnterPress = ({key}) => {\r\n        if (key === 'Enter') {\r\n            this.addTask();\r\n        }\r\n    };\r\n\r\n    addTask = () => {\r\n        const {inputText} = this.state;\r\n        if (inputText.length > 2) {\r\n            const {addTask} = this.props;\r\n\r\n            addTask(new Date().getTime(), inputText, false);\r\n\r\n            this.setState({\r\n                inputText: ''\r\n            });\r\n        }\r\n    };\r\n\r\n    filterTasks = (tasks, activeFilter) => {\r\n        switch (activeFilter) {\r\n            case 'active':\r\n                return tasks.filter(task => !task.isCompleted);\r\n            case 'completed':\r\n                return tasks.filter(task => task.isCompleted);\r\n\r\n            default:\r\n                return tasks;\r\n        }\r\n    };\r\n\r\n    getActiveTasks = (tasks) => tasks.filter(task => (\r\n        !task.isCompleted\r\n    )).length;\r\n\r\n\r\n    render() {\r\n        const {inputText} = this.state;\r\n        const {tasks, toggleTask, deleteTask, filter, changeFilter} = this.props;\r\n        const isTaskExists = tasks && tasks.length > 0;\r\n\r\n        const filteredTasks = this.filterTasks(tasks, filter);\r\n        const activeTasksAmount = this.getActiveTasks(tasks);\r\n\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <div className='todo-wrapper'>\r\n                            <ToDoInput\r\n                                value={inputText}\r\n                                onChange={this.handleInputChange}\r\n                                onEnterPress={this.onEnterPress}\r\n                                onPlusClick={this.onPlusClick}\r\n                            />\r\n                            {isTaskExists && <ToDoList taskList={filteredTasks}\r\n                                                       toggleTask={toggleTask}\r\n                                                       deleteTask={deleteTask}/>}\r\n                            {isTaskExists && <Footer amount={activeTasksAmount}\r\n                                                     activeFilter={filter}\r\n                                                     changeFilter={changeFilter}/>}\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default connect(({tasks, filter}) => ({\r\n    tasks,\r\n    filter\r\n}), {addTask, toggleTask, deleteTask, changeFilter})(ToDo);","import {ADD_TASK, TOGGLE_TASK, DELETE_TASK, CHANGE_FILTER} from '../constants';\r\n\r\nexport const addTask = (id, text, isCompleted) => ({\r\n    type: ADD_TASK,\r\n    id,\r\n    text,\r\n    isCompleted\r\n});\r\n\r\nexport const toggleTask = (id) => ({\r\n    type: TOGGLE_TASK,\r\n    id\r\n});\r\n\r\nexport const deleteTask = (id) => ({\r\n    type: DELETE_TASK,\r\n    id\r\n});\r\n\r\nexport const changeFilter = (activeFilter) => ({\r\n    type: CHANGE_FILTER,\r\n    activeFilter\r\n});\r\n","const ADD_TASK = 'ADD_TASK';\r\nconst TOGGLE_TASK = 'TOGGLE_TASK';\r\nconst DELETE_TASK = 'DELETE_TASK';\r\nconst CHANGE_FILTER = 'CHANGE_FILTER';\r\n\r\n\r\nexport {ADD_TASK, TOGGLE_TASK, DELETE_TASK, CHANGE_FILTER};","import React from 'react';\n\nimport Title from './components/title/Title';\nimport ToDo from './containers/todo/ToDo';\n\n\nconst App = () => (\n    <>\n        <Title title=\"ToDo App\"/>\n        <ToDo/>\n    </>\n);\n\nexport default App;\n","import {ADD_TASK, TOGGLE_TASK, DELETE_TASK} from '../constants';\r\nimport { load } from 'redux-localstorage-simple';\r\n\r\nlet STATE = load({namespace: 'to-do-app'});\r\n\r\nif (!STATE || !STATE.tasks || !STATE.tasks.length) {\r\n    STATE = {\r\n        tasks: []\r\n    }\r\n}\r\n\r\nconst tasks = (state = STATE.tasks, {type, id, text, isCompleted}) => {\r\n    switch (type) {\r\n        case ADD_TASK:\r\n            return [\r\n                ...state, {\r\n                    id,\r\n                    text,\r\n                    isCompleted\r\n                }\r\n            ];\r\n        case TOGGLE_TASK:\r\n            return [...state].map((task) => {\r\n                if (task.id === id) {\r\n                    task.isCompleted = !task.isCompleted;\r\n                }\r\n                return task;\r\n            });\r\n        case DELETE_TASK:\r\n            return [...state].filter(task => task.id !== id);\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default tasks;","import {CHANGE_FILTER} from \"../constants\";\r\nimport { load } from 'redux-localstorage-simple';\r\n\r\nlet STATE = load({namespace: 'to-do-app'});\r\n\r\nif (!STATE || !STATE.filter || !STATE.filter.length) {\r\n    STATE = {\r\n        filter: 'all',\r\n    }\r\n}\r\n\r\nconst filter = (state = STATE.filter, {type, activeFilter}) => {\r\n    switch (type) {\r\n        case CHANGE_FILTER:\r\n            return activeFilter;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default filter;","import {createStore, compose, applyMiddleware} from 'redux';\r\nimport rootReducer from './reducers/index';\r\nimport {save} from 'redux-localstorage-simple';\r\n\r\n\r\n/*const logger = (state) => (next) => (action) => {\r\n    console.log('action started', action);\r\n    next(action);\r\n    console.log('action finished', action);\r\n};*/\r\n\r\nconst composeEnhancers =\r\n    typeof window === 'object' &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\r\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n            // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n        }) : compose;\r\n\r\n\r\nconst configureStore = preloadedState => (\r\n    createStore(\r\n        rootReducer,\r\n        preloadedState,\r\n        composeEnhancers(\r\n            applyMiddleware(\r\n                save({namespace: 'to-do-app'})\r\n            )\r\n        )\r\n    )\r\n);\r\n\r\nconst store = configureStore({});\r\n\r\nexport default store;","import {combineReducers} from 'redux';\r\n\r\nimport tasks from './tasks';\r\nimport filter from './filters';\r\n\r\nconst rootReducer = combineReducers({tasks, filter});\r\n\r\nexport default rootReducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './index.css';\n\nimport App from './App';\n\nimport {Provider} from 'react-redux';\nimport store from './store';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render((\n    <Provider store={store}>\n        <App/>\n    </Provider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}